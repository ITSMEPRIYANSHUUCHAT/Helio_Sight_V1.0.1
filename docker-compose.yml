services:
  timescaledb:
    image: timescale/timescaledb:latest-pg16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: solar_db
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  airflow:
    image: apache/airflow:2.10.0-python3.12
    environment:
      PYTHONPATH: /opt/airflow/backend:/opt/airflow/dags
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql://postgres:password@timescaledb:5432/solar_db
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      POSTGRES_URL: postgresql://postgres:password@timescaledb:5432/solar_db
      COMPANY_KEY: ${COMPANY_KEY:-your_key}
      _AIRFLOW_DB_MIGRATE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: admin
      _AIRFLOW_WWW_USER_PASSWORD: admin
    volumes:
      - ./backend/dags:/opt/airflow/dags
      - ./backend:/opt/airflow/backend
    ports:
      - "8080:8080"
    depends_on:
      timescaledb:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
        bash -c "
          pip install -e /opt/airflow/backend &&
          airflow db migrate &&
          airflow users create \
            --username admin \
            --firstname Admin \
            --lastname User \
            --role Admin \
            --email admin@example.com \
            --password admin || true &&
          airflow scheduler & 
          airflow webserver
        "
    env_file:
      - .env  # Added for consistency with other services

  fastapi:
    build:
      context: .
    volumes:
      - ./backend:/app/backend
    depends_on:
      timescaledb:
        condition: service_healthy
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ALGORITHM=${ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - FRONTEND_URL=${FRONTEND_URL}
      - COMPANY_KEY=${COMPANY_KEY}
      - FLASK_ENV=${FLASK_ENV}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - BATCH_SIZE=${BATCH_SIZE}
      - SOLARMAN_EMAIL=${SOLARMAN_EMAIL}
      - SOLARMAN_PASSWORD_SHA256=${SOLARMAN_PASSWORD_SHA256}
      - SOLARMAN_APP_ID=${SOLARMAN_APP_ID}
      - SOLARMAN_APP_SECRET=${SOLARMAN_APP_SECRET}
    ports:
      - "8000:8000"
    command: ["uvicorn", "backend.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import requests; r = requests.get('http://localhost:8000/health', timeout=5); r.raise_for_status()\" || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    env_file:
      - .env

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app/frontend
      - frontend_node_modules:/app/frontend/node_modules
    ports:
      - "3000:3000"
    command: ["npm", "run", "dev"]
    depends_on:
      - fastapi
    env_file:
      - .env
    deploy:
      resources:
        limits:
          memory: 1g

  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - timescaledb
    volumes:
      - pgadmin_data:/var/lib/pgadmin

volumes:
  timescaledb_data:
  pgadmin_data:
  frontend_node_modules:
